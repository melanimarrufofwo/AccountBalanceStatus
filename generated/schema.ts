// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("target", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExampleEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    return value!.toBytes();
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get frozen(): boolean {
    let value = this.get("frozen");
    return value!.toBoolean();
  }

  set frozen(value: boolean) {
    this.set("frozen", Value.fromBoolean(value));
  }
}

export class AccountAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("inCount", Value.fromBigInt(BigInt.zero()));
    this.set("outCount", Value.fromBigInt(BigInt.zero()));
    this.set("inUpdateTime", Value.fromBigInt(BigInt.zero()));
    this.set("outUpdateTime", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AccountAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AccountAction", id.toString(), this);
    }
  }

  static load(id: string): AccountAction | null {
    return changetype<AccountAction | null>(store.get("AccountAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inCount(): BigInt {
    let value = this.get("inCount");
    return value!.toBigInt();
  }

  set inCount(value: BigInt) {
    this.set("inCount", Value.fromBigInt(value));
  }

  get outCount(): BigInt {
    let value = this.get("outCount");
    return value!.toBigInt();
  }

  set outCount(value: BigInt) {
    this.set("outCount", Value.fromBigInt(value));
  }

  get inUpdateTime(): BigInt {
    let value = this.get("inUpdateTime");
    return value!.toBigInt();
  }

  set inUpdateTime(value: BigInt) {
    this.set("inUpdateTime", Value.fromBigInt(value));
  }

  get outUpdateTime(): BigInt {
    let value = this.get("outUpdateTime");
    return value!.toBigInt();
  }

  set outUpdateTime(value: BigInt) {
    this.set("outUpdateTime", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get handleType(): boolean {
    let value = this.get("handleType");
    return value!.toBoolean();
  }

  set handleType(value: boolean) {
    this.set("handleType", Value.fromBoolean(value));
  }
}
